/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'mamad' at '14/03/15 22:38' with Gradle 2.2
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2/userguide/tutorial_java_projects.html
 */

 buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.ratpack:ratpack-gradle:0.9.14',
                  'com.github.jengelman.gradle.plugins:shadow:1.2.1'
    }
}

 if (!JavaVersion.current().java8Compatible) {
   throw new IllegalStateException("Must be built with Java 8 or higher")
 }


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'project-report'

// In this section you declare where to find the dependencies of your project
repositories {
    maven { url 'http://clinker.netty.io/nexus/content/repositories/snapshots' }
    jcenter()
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                //configure git support for the project in idea
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'
            }
        }
    }
}

subprojects {
    apply plugin: 'java'

    version = '0.0.1'
    group = 'microservices.sample'

    configurations {
        integrationTest {
            extendsFrom testCompile
        }
    }
    configurations.integrationTest {
        description = 'Integration classpath'
    }
    configurations.compile.transitive = true


    dependencies {

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile 'org.hamcrest:hamcrest-all:1.3'
    }

    task initProject(description: 'Initialize project') << { task ->
        new File(task.project.name).mkdirs();
        if (!task.project.name.equalsIgnoreCase('deploy')) {
            task.project.sourceSets*.java.srcDirs*.each { it.mkdirs() }
            task.project.sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }
        def bf = new File(task.project.name, "${task.project.name}.gradle")
        if (!bf.exists()) {
            bf.createNewFile()
        }
        def readme = new File(task.project.name, "README.md")
        if (!readme.exists()) {
            readme.createNewFile()
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8

    sourceSets {
        integrationTest {
            java {
                srcDir 'src/integrationTest/java'
            }
            resources {
                srcDir 'src/integrationTest/resources'
            }
            compileClasspath = sourceSets.main.output + configurations.integrationTest
            runtimeClasspath = output + compileClasspath
        }
    }

    idea {
        module {
            outputDir = file('build/idea')
            testSourceDirs += file('src/integrationTest/java')
            testSourceDirs += file('src/integrationTest/resources')
        }

    }

    task integTest(type: Test, description: 'Run integration tests') {
        jvmArgs = ['-ea'] //required for ES tests
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }
}
